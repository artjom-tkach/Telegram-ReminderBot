import telebot
from telebot import types
# –ú–æ–¥—É–ª—å –±–æ—Ç–∞
from lib import database_class
# –ú–æ–¥—É–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
from lib import scheduler_class
# –ú–æ–¥—É–ª—å scheduler
from lib import config
# –ú–æ–¥—É–ª—å –∫–æ–Ω—Ñ–∏–≥–∞
import re
# –ú–æ–¥—É–ª—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
from bs4 import BeautifulSoup
# –ú–æ–¥—É–ª—å, –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
import datetime


# –ú–æ–¥—É–ª—å –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏

class Bot:
    BOT = None
    # –≠–∫–∑–µ–º–ª—è—Ä –±–æ—Ç–∞
    DATABASE = None
    # –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    SCHEDULER = None
    # –≠–∫–∑–µ–º–ø–ª—è—Ä scheduler
    stageRepetition = 0
    # –¢–µ–∫—É—â–∞—è —Å—Ç–∞–¥–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    markup = None
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–æ—Ç–∞
    userData = {}
    # –°—é–¥–∞ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è, –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–∞
    messageRepetitionInterval = '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è'
    messageWhatMaterial = '–ö–∞–∫–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª –≤—ã –∏–∑—É—á–∏–ª–∏? –ü—Ä–∏–º–µ—Ä: —è –∏–∑—É—á–∏–ª –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞.'
    messageWhatSource = '–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —ç—Ç–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª? –ü—Ä–∏–º–µ—Ä: –≤ —Å–ª–æ–≤–∞—Ä–µ, –Ω–∞ 42 —Å—Ç—Ä–∞–Ω–∏—Ü–µ.'
    messageInvalidMaterial = ' (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)'
    messageInvalidSource = ' (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)'
    messageTaskCancel = '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.'
    messageAddRemind = '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {0}, {1}. –°–ª–µ–¥—É—é—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è ‚Ññ<b>{2}</b> - {3} –≤ {4}.'
    messageRemind = '–ù–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è ‚Ññ<b>{0}</b>! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {1}, {2} ({3} —Å—Ç–∞–¥–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è). –°–ª–µ–¥—É—é—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è - {4} –≤ {5}'
    messageLastRemind = '–ù–æ–≤–æ–µ <b>–ø–æ—Å–ª–µ–¥–Ω–∏–µ</b> –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è! –í—ã –ø—Ä–æ—à–ª–∏ –≤–µ—Å—å –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è ‚Ññ<b>{0}</b>! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {1}, {2}. –ë–æ–ª—å—à–µ –≤—ã –Ω–µ –∑–∞–±—É–¥–∏—Ç–µ –≤—ã—É—á–µ–Ω–Ω—ã–π <b>–º–∞—Ç–µ—Ä–∏–∞–ª</b>.'
    messageAddRemindError = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è! –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - @artyom_tk.'
    messageRemindError = '–ù–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º ‚Ññ<b>{0}</b>. –í–∞—à–∞ –ø–æ–¥–ø–∏—Å—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {1}, {2} ({3} —Å—Ç–∞–¥–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - @artyom_tk.'
    messageProgramWord = '–≠—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–µ. (—á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ - /cancel)'
    welcomeMessage = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}! –í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ—Ç–æ–¥ <b>–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏–∑—É—á–µ–Ω–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞</b>, –∏ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –≤—ã—É—á–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–µ–º–µ—Ü–∫–æ–≥–æ —É—á–µ–Ω–æ–≥–æ –ì–µ—Ä–º–∞–Ω–∞ –≠–±–±–∏–Ω–≥–∞—É–∑–∞.';
    pathWelcomeImg = 'images/welcome.jpg'
    unknownCommand = '–Ø –µ—â–µ –Ω–µ —Ä–µ—à–∏–ª, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å ü§î'
    messageProgramIsNotWorking = '–ë–æ—Ç –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'

    def __init__(self):
        self.BOT = telebot.TeleBot(config.TOKEN, parse_mode='HTML')
        self.DATABASE = database_class.DataBase()
        self.SCHEDULER = scheduler_class.Scheduler()

        self.setKeyboard()
        self.setHandler()
        self.setPolling()
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É(—Ä–∞–∑–º–µ—Ç–∫—É), handlers, polling –¥–ª—è –±–æ—Ç—É

    def setKeyboard(self):
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞(—Ä–∞–∑–º–µ—Ç–∫–∞) –±–æ—Ç–∞
        self.markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttonRepetitionInterval = types.KeyboardButton(self.messageRepetitionInterval)
        self.markup.add(buttonRepetitionInterval)

    def setHandler(self):
        # Handlers –±–æ—Ç–∞
        @self.BOT.message_handler(commands=['start'])
        def welcome(message):
            self.BOT.send_photo(message.chat.id,
                                open(self.pathWelcomeImg, 'rb'),
                                self.welcomeMessage.format(message.from_user),
                                reply_markup=self.markup
                                )

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!
        @self.BOT.message_handler(content_types=['text'])
        def hanglerMessage(message):
            if message.chat.type == 'private':
                self.isWhatCommand(message)
                # –°–º–æ—Ç—Ä–∏–º, –∫–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å

    def checkMessageMaterial(self, message):
        material = self.htmlSpecialChars(message.text)
        isProgramWord = self.isProgramWord(message)
        isCancel = self.isCancel(message)
        if (len(material) >= 5) and (isProgramWord is False) and (isCancel is False):
            self.userData['material'] = material
            # –°–æ–∑–¥–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ userData
            self.sendMessageWhatSource(message)
        else:
            if isCancel is False:
                self.sendMessageWhatMaterial(message, True)
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ (–ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç)

    def checkSourceMaterial(self, message):
        source = self.htmlSpecialChars(message.text)
        isProgramWord = self.isProgramWord(message)
        isCancel = self.isCancel(message)
        if (len(source) >= 5) and (isProgramWord is False) and (isCancel is False):
            self.userData['username'] = message.from_user.username
            self.userData['source'] = source
            self.userData['stage_repetition'] = 1
            # –°—Ç–∞–¥–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            self.userData['created_at'] = datetime.datetime.now()
            # –û–ø—Ä–µ–¥–µ–ª—è–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            self.userData['next_repetition_at'] = self.userData['created_at'] + datetime.timedelta(
                minutes=
                self.getMinuteNextStageRepetition(self.userData['stage_repetition']))
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è, –±—É–¥–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–ø–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è, –Ω–∞ –¥–∞–Ω–Ω–æ–π —Å—Ç–∞–¥–∏–∏)
            # –°–æ–∑–¥–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ userData
            insertID = self.insertRemind()
            if insertID:
                self.userData['id'] = insertID
                self.userData['chat_id'] = message.chat.id,
                self.userData['chat_id'] = int(self.userData['chat_id'][0])
                date = self.userData['next_repetition_at'].strftime('%m.%d.%Y')
                time = self.userData['next_repetition_at'].strftime('%H:%M')
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥ –¥–∞—Ç—ã
                self.BOT.send_message(message.chat.id,
                                      self.messageAddRemind.format(self.userData['material'], self.userData['source'],
                                                                   self.userData['id'], date,
                                                                   time))
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
                self.addJob(self.userData)
                self.userData = {}
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
                # –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤
            else:
                self.BOT.send_message(message.chat.id, self.messageAddRemindError)

            # –î–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –µ—Å—Ç—å insertID)
        else:
            if isCancel is False:
                self.sendMessageWhatSource(message, True)
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ (–ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç)

    def addJob(self, data):
        self.SCHEDULER.scheduler.add_job(self.remindJob, 'date', run_date=data['next_repetition_at'],
                                         args=[data])
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É

    def remindJob(self, args):
        minuteNextStageRepetition = self.getMinuteNextStageRepetition(args['stage_repetition'] + 1)
        isFinished = 0
        if minuteNextStageRepetition is None:
            args['next_repetition_at'] = None
            isFinished = 1
        else:
            args['stage_repetition'] = args['stage_repetition'] + 1
            # –î–æ–±–∞–≤–ª—è–µ–º +1 –∫ —Å—Ç–∞–¥–∏–∏
            args['next_repetition_at'] = args['next_repetition_at'] + datetime.timedelta(
                minutes=minuteNextStageRepetition)
        # –ü–æ–ª—É—á–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞–¥–∏–∏, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è, –∑–∞–ø–∏—Å—É–µ–º NULL)
        sql = "UPDATE Reminders SET stage_repetition = %s, next_repetition_at = %s, is_finished = %s WHERE id = %s"
        data = (args['stage_repetition'], args['next_repetition_at'], isFinished, args['id'])
        if self.DATABASE.update(sql, data):
            if isFinished == 1:
                self.BOT.send_message(args['chat_id'],
                                      self.messageLastRemind.format(args['id'], args['material'],
                                                                    args['source']))
            else:
                date = args['next_repetition_at'].strftime('%m.%d.%Y')
                time = args['next_repetition_at'].strftime('%H:%M')
                self.BOT.send_message(args['chat_id'],
                                      self.messageRemind.format(args['id'], args['material'],
                                                                args['source'], args['stage_repetition'] - 1,
                                                                date, time))
                self.addJob(args)
        else:
            self.BOT.send_message(args['chat_id'],
                                  self.messageRemindError.format(args['id'], args['material'],
                                                                 args['source'], args['stage_repetition'],
                                                                 ))

    def insertRemind(self):
        sql = "INSERT INTO `Reminders` (`username`, `material`, `source`, " \
              "`stage_repetition`, `created_at`, `next_repetition_at`) VALUES (%s, %s, %s, %s, %s, %s)"
        data = (self.userData['username'], self.userData['material'], self.userData['source'],
                self.userData['stage_repetition'],
                self.userData['created_at'], self.userData['next_repetition_at'])
        return self.DATABASE.insert(sql, data)
        # –î–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    def sendMessageWhatMaterial(self, message, invalid=False):
        invalidMessage = ''
        if invalid:
            invalidMessage = self.messageInvalidMaterial
        material = self.BOT.send_message(message.chat.id, self.messageWhatMaterial + invalidMessage)
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω invalid –ø–∞—Ä–∞–º–µ—Ç—Ä, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
        self.BOT.register_next_step_handler(material, self.checkMessageMaterial)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

    def sendMessageWhatSource(self, message, invalid=False):
        invalidMessage = ''
        if invalid:
            invalidMessage = self.messageInvalidSource
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω invalid –ø–∞—Ä–∞–º–µ—Ç—Ä, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
        material = self.BOT.send_message(message.chat.id, self.messageWhatSource + invalidMessage)
        self.BOT.register_next_step_handler(material, self.checkSourceMaterial)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

    def isWhatCommand(self, message):
        if self.allConnected(message):
            if message.text == self.messageRepetitionInterval:
                self.sendMessageWhatMaterial(message)
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞–∫–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑—É—á–µ–Ω
            else:
                self.BOT.send_message(message.chat.id, self.unknownCommand)
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞

    def isProgramWord(self, message):
        if message.text == self.messageRepetitionInterval:
            self.BOT.send_message(message.chat.id, self.messageProgramWord)
        else:
            if message.text == '/start':
                self.BOT.send_message(message.chat.id, self.messageProgramWord)
            else:
                return False
        # –£–∑–Ω–∞–µ–º, –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–æ, –ª–∏ —Å–ª–æ–≤–æ

    def isCancel(self, message):
        if message.text == '/cancel':
            self.BOT.send_message(message.chat.id, self.messageTaskCancel)
        else:
            return False

        # –£–∑–Ω–∞–µ–º, —Å–ª–æ–≤–æ, –∫–æ–º–∞–Ω–¥–∞?

    def setPolling(self):
        try:
            # self.BOT.polling(none_stop=True)
            self.BOT.polling()
        except Exception as e:
            print(e)
            # time.sleep(15)

    def getMinuteNextStageRepetition(self, stageRepetition):
        return {
            1: 15,
            2: 60,
            3: 180,
            4: 1440,
            5: 2880,
            6: 5760,
            7: 10080,
            8: 20160,
            9: 44640
        }.get(stageRepetition, None)

    def allConnected(self, message):
        if (self.DATABASE.isConnected()) and self.SCHEDULER.error == 0:
            return True
        self.BOT.send_message(message.chat.id, self.messageProgramIsNotWorking)
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–¥–∞–µ–º –æ—à–∏–±–∫—É

    def htmlSpecialChars(self, data):
        if isinstance(data, str):
            return re.sub(r'\s+', ' ', BeautifulSoup(data, 'html.parser').get_text().strip())
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
