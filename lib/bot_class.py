import telebot
from telebot import types
# –ú–æ–¥—É–ª—å –±–æ—Ç–∞
from lib import database_class
# –ú–æ–¥—É–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
from lib import scheduler_class
# –ú–æ–¥—É–ª—å scheduler
from lib import config
# –ú–æ–¥—É–ª—å –∫–æ–Ω—Ñ–∏–≥–∞
import time
# –ú–æ–¥—É–ª—å sleep
import re
# –ú–æ–¥—É–ª—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
import datetime
import pytz
# –ú–æ–¥—É–ª—å –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏


class Bot:
    BOT = None
    # –≠–∫–∑–µ–º–ª—è—Ä –±–æ—Ç–∞
    DATABASE = None
    # –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    SCHEDULER = None
    # –≠–∫–∑–µ–º–ø–ª—è—Ä scheduler
    markup = None
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–æ—Ç–∞
    userData = {}
    # –°—é–¥–∞ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è, –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–∞
    messageRepetitionInterval = '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è'
    messageWhatMaterial = '{0} \n–ö–∞–∫–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª –≤—ã –∏–∑—É—á–∏–ª–∏? \n–ü—Ä–∏–º–µ—Ä: —è –∏–∑—É—á–∏–ª –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞. (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)'
    messageWhatSource = '{0} \n–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —ç—Ç–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª? \n–ü—Ä–∏–º–µ—Ä: –≤ —Å–ª–æ–≤–∞—Ä–µ, –Ω–∞ 42 —Å—Ç—Ä–∞–Ω–∏—Ü–µ. (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)'
    messageWhatStageRepetition = '{0} \n–ö–∞–∫—É—é —Å—Ç–∞–¥–∏—é –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏? \n–ï—Å–ª–∏ –≤—ã —Ç–æ–ª—å–∫–æ –∏–∑—É—á–∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0. (–æ—Ç 0 –¥–æ 8)'
    messageTaskCancel = '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.'
    messageAddRemind = '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! (‚Ññ<b>{0}</b>) \n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {1}, {2}. \n–°–ª–µ–¥—É—é—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è ‚Ññ<b>{3}</b> –ø—Ä–∏–π–¥–µ—Ç —á–µ—Ä–µ–∑ {4} - {5} –≤ {6} (–±—É–¥–µ—Ç {7} —Å—Ç–∞–¥–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è).'
    messageRemind = '–ù–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è ‚Ññ<b>{0}</b>! \n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {1}, {2}. ({3} —Å—Ç–∞–¥–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è) \n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –ø–æ–≤—Ç–æ—Ä–∏–ª–∏ –¥–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª, –Ω–∞–∂–º–∏—Ç–µ <b>–∫–Ω–æ–ø–∫—É</b> –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.'
    messageLastRemind = '–í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —Å—Ç–∞–¥–∏–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Ññ<b>{0}</b>! \n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {1}, {2}. \n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å—Å—è –∏ —É—á–∏—Ç—å—Å—è —á–µ–º—É-—Ç–æ –Ω–æ–≤–æ–º—É, —Ç–µ–ø–µ—Ä—å –≤—ã –Ω–µ –∑–∞–±—É–¥–µ—Ç–µ –≤—ã—É—á–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª.'
    messageRemindConfirm = '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ <b>‚Ññ{0}</b> —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. ({1} —Å—Ç–∞–¥–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è) \n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {2}, {3}. \n–°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏–π–¥–µ—Ç —á–µ—Ä–µ–∑ {4} - {5} –≤ {6} (–±—É–¥–µ—Ç {7} —Å—Ç–∞–¥–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è)'
    messageRemindConfirmAlert = '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Ññ{0} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ \n ({1} —Å—Ç–∞–¥–∏—è)'
    messageAddRemindError = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è! \n–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - @artyom_tk.'
    messageRemindError = '–ù–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è! \n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º ‚Ññ<b>{0}</b>. \n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {1}, {2} ({3} —Å—Ç–∞–¥–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è). \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - @artyom_tk.'
    messageRemindConfirmError = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Ññ{0}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ. \n–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - @artyom_tk.'
    messageProgramWord = '–≠—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–µ. (—á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ - /cancel)'
    messageCancel = '–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ - /cancel'
    welcomeMessage = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}! –í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ—Ç–æ–¥ <b>–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏–∑—É—á–µ–Ω–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞</b>, –∏ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –≤—ã—É—á–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–µ–º–µ—Ü–∫–æ–≥–æ —É—á–µ–Ω–æ–≥–æ –ì–µ—Ä–º–∞–Ω–∞ –≠–±–±–∏–Ω–≥–∞—É–∑–∞.'
    messageRepetitionScheme = '–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å–æ —Å—Ö–µ–º–æ–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞. –í—ã –¥–æ–ª–∂–Ω–æ —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å <b>–∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è</b>, —á—Ç–æ–±—ã –≤—ã —Å–º–æ–≥–ª–∏ –∑–∞–ø–æ–º–Ω–∏—Ç—å –≤—ã—É—á–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞–≤—Å–µ–≥–¥–∞.'
    pathWelcomeImg = 'images/welcome.jpg'
    pathRepetitionScheme = 'images/repetition-scheme.jpg'
    unknownCommand = '–Ø –µ—â–µ –Ω–µ —Ä–µ—à–∏–ª, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å ü§î'
    messageProgramIsNotWorking = '–ë–æ—Ç –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'

    def __init__(self):
        self.BOT = telebot.TeleBot(config.TOKEN_BOT, parse_mode='HTML')
        self.DATABASE = database_class.DataBase()
        self.SCHEDULER = scheduler_class.Scheduler()

        self.setKeyboard()
        self.setHandler()
        self.setPolling()
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É(—Ä–∞–∑–º–µ—Ç–∫—É), handlers, polling –¥–ª—è –±–æ—Ç—É

    def setKeyboard(self):
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞(—Ä–∞–∑–º–µ—Ç–∫–∞) –±–æ—Ç–∞
        self.markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttonRepetitionInterval = types.KeyboardButton(self.messageRepetitionInterval)
        self.markup.add(buttonRepetitionInterval)

    def setHandler(self):
        # Handlers –±–æ—Ç–∞
        @self.BOT.message_handler(commands=['start'])
        def welcome(message):
            self.BOT.send_photo(
                message.chat.id,
                open(self.pathWelcomeImg, 'rb'),
                self.welcomeMessage.format(message.from_user),
            )

            self.BOT.send_photo(
                message.chat.id,
                open(self.pathRepetitionScheme, 'rb'),
                self.messageRepetitionScheme,
                reply_markup=self.markup
            )

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å—Ö–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞)

        @self.BOT.message_handler(content_types=['text'])
        def hanglerMessage(message):
            if message.chat.type == 'private':
                self.isWhatCommand(message)
                # –°–º–æ—Ç—Ä–∏–º, –∫–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å

        @self.BOT.callback_query_handler(func=lambda call: True)
        def handlerButton(call):
            try:
                if call.message:
                    if self.isInteger(call.data):
                        sql = "SELECT * FROM reminders WHERE id = %s"
                        data = (call.data,)
                        rows = self.DATABASE.select(sql, data)
                        if rows:
                            array = {}
                            for row in rows:
                                array["id"] = row[0]
                                array["username"] = row[1]
                                array["material"] = row[2]
                                array["source"] = row[3]
                                array["chat_id"] = row[4]
                                array["stage_repetition"] = row[5]
                                array["is_finished"] = row[6]
                                array["created_at"] = row[7]
                                array["next_repetition_at"] = row[8]
                            # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤
                            minuteNextStageRepetition = self.getMinuteStageRepetition(array['stage_repetition'] + 1)
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç–∞–¥–∏—é
                            if minuteNextStageRepetition is not None:
                                array['next_repetition_at'] = datetime.datetime.now(self.setTimezone()) \
                                                              + datetime.timedelta(minutes=minuteNextStageRepetition)
                                # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É, —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                                sql = "UPDATE reminders SET next_repetition_at = %s WHERE id = %s"
                                data = (array['next_repetition_at'], array['id'])
                                if self.DATABASE.update(sql, data):
                                    # –ó–∞–ø–∏—Å—É–µ–º –≤ –±–¥ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                                    date = array['next_repetition_at'].strftime('%m.%d.%Y')
                                    time = array['next_repetition_at'].strftime('%H:%M')
                                    timeInterval = self.getTimeIntervalStageRepetition(array['stage_repetition'] + 1)
                                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥ –¥–∞—Ç—ã (+1)
                                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–æ–≤–∞–º–∏
                                    self.BOT.delete_message(
                                        chat_id=call.message.chat.id,
                                        message_id=call.message.message_id
                                    )
                                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                                    self.BOT.send_message(call.message.chat.id, text=self.messageRemindConfirm.format(
                                        array['id'], array['stage_repetition'], array['material'],
                                        array['source'], timeInterval,
                                        date, time, array['stage_repetition'] + 1
                                        # (+1)
                                    ), reply_markup=None)
                                    self.BOT.answer_callback_query(
                                        callback_query_id=call.id, show_alert=True,
                                        text=self.messageRemindConfirmAlert.format(
                                            array['id'], array['stage_repetition']
                                        ))
                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è + alert
                                    self.addJob(array)
                                    # –ù–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                                else:
                                    self.BOT.answer_callback_query(
                                        callback_query_id=call.id, show_alert=True,
                                        text=self.messageRemindConfirmError.format(
                                            array['id']
                                        ))
                                #  –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                            else:
                                self.BOT.delete_message(
                                    chat_id=call.message.chat.id,
                                    message_id=call.message.message_id
                                )
                                self.remindJob(array)
                                # –ù–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                        else:
                            self.BOT.answer_callback_query(
                                callback_query_id=call.id, show_alert=True,
                                text=self.messageRemindConfirmError.format(
                                    call.data
                                ))
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ

            except Exception as e:
                print(repr(e))

            # –õ–æ–≤–∏–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ

    def setPolling(self):
        try:
            self.BOT.polling(none_stop=True)
        except Exception as e:
            print(e)
            time.sleep(15)

    def checkMessageMaterial(self, message):
        material = self.htmlSpecialChars(message.text)
        isProgramWord = self.isProgramWord(message)
        isCancelWord = self.isCancelWord(message)
        if (len(material) >= 5) and (isProgramWord is False) and (isCancelWord is False):
            self.userData['material'] = material.lower()  # –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
            # –°–æ–∑–¥–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ userData
            self.sendMessageWhatSource(message)
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        else:
            if isCancelWord is False:
                self.sendMessageWhatMaterial(message)
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ (–ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç)

    def checkSourceMaterial(self, message):
        source = self.htmlSpecialChars(message.text)
        isProgramWord = self.isProgramWord(message)
        isCancelWord = self.isCancelWord(message)
        if (len(source) >= 5) and (isProgramWord is False) and (isCancelWord is False):
            self.userData['source'] = source.lower()  # –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
            # –°–æ–∑–¥–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ userData
            self.sendMessageWhatStageRepetition(message)
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        else:
            if isCancelWord is False:
                self.sendMessageWhatSource(message)
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ (–ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç)

    def checkStageRepetition(self, message):
        arrayStages = {"0", "1", "2", "3", "4", "5", "6", "7", "8"}
        stageRepetition = self.htmlSpecialChars(message.text)
        isProgramWord = self.isProgramWord(message)
        isCancelWord = self.isCancelWord(message)
        if (stageRepetition in arrayStages) and (isProgramWord is False) and (isCancelWord is False):
            stageRepetition = int(stageRepetition)
            self.userData['stage_repetition'] = stageRepetition
            stageRepetition += 1
            # –°—Ç–∞–¥–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (+1)
            self.userData['username'] = message.from_user.username
            # –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.userData['chat_id'] = message.chat.id
            self.userData['created_at'] = datetime.datetime.now(self.setTimezone())
            # –û–ø—Ä–µ–¥–µ–ª—è–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è)
            self.userData['next_repetition_at'] = self.userData['created_at'] + datetime.timedelta(
                minutes=
                self.getMinuteStageRepetition(stageRepetition))
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è, –±—É–¥–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–ø–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è, –Ω–∞ –¥–∞–Ω–Ω–æ–π —Å—Ç–∞–¥–∏–∏)
            # –°–æ–∑–¥–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ userData
            insertID = self.insertRemind()
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if insertID:
                self.userData['id'] = insertID
                # –ü–æ–ª—É—á–∞–µ–º ID –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
                date = self.userData['next_repetition_at'].strftime('%m.%d.%Y')
                time = self.userData['next_repetition_at'].strftime('%H:%M')
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥ –¥–∞—Ç—ã
                timeInterval = self.getTimeIntervalStageRepetition(stageRepetition)
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ (—á–µ—Ä–µ–∑ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è, –ø—Ä–∏–π–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ)
                self.BOT.send_message(message.chat.id,
                                      self.messageAddRemind.format(self.userData['id'],
                                                                   self.userData['material'], self.userData['source'],
                                                                   self.userData['id'], timeInterval,
                                                                   date, time,
                                                                   stageRepetition))
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
                self.addJob(self.userData)
                self.userData = {}
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
                # –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤
            else:
                self.BOT.send_message(message.chat.id, self.messageAddRemindError)
            # –î–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –µ—Å—Ç—å insertID)
        else:
            if isCancelWord is False:
                self.sendMessageWhatStageRepetition(message)

    def sendMessageWhatMaterial(self, message):
        material = self.BOT.send_message(message.chat.id, self.messageWhatMaterial.format(self.messageCancel))
        self.BOT.register_next_step_handler(material, self.checkMessageMaterial)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö (–º–∞—Ç–µ—Ä–∏–∞–ª)

    def sendMessageWhatSource(self, message):
        source = self.BOT.send_message(message.chat.id, self.messageWhatSource.format(self.messageCancel))
        self.BOT.register_next_step_handler(source, self.checkSourceMaterial)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö (–∏—Å—Ç–æ—á–Ω–∏–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞)

    def sendMessageWhatStageRepetition(self, message):
        stageRepetition = self.BOT.send_message(message.chat.id,
                                                self.messageWhatStageRepetition.format(self.messageCancel))
        self.BOT.register_next_step_handler(stageRepetition, self.checkStageRepetition)

    def addJob(self, data):
        self.SCHEDULER.scheduler.add_job(self.remindJob, 'date', run_date=data['next_repetition_at'],
                                         args=[data])
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É

    def remindJob(self, args):
        minuteNextStageRepetition = self.getMinuteStageRepetition(args['stage_repetition'] + 1)
        isFinished = False
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if minuteNextStageRepetition is not None:
            args['stage_repetition'] = args['stage_repetition'] + 1
        else:
            isFinished = True

        args['next_repetition_at'] = None
        sql = "UPDATE reminders SET stage_repetition = %s, is_finished = %s, next_repetition_at = %s WHERE id = %s"
        data = (args['stage_repetition'], isFinished, args['next_repetition_at'], args['id'])
        if self.DATABASE.update(sql, data):
            if isFinished == 0:
                markup = types.InlineKeyboardMarkup(row_width=2)
                button = types.InlineKeyboardButton(
                    "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚Ññ{0} ({1} —Å—Ç–∞–¥–∏—è)".format(args['id'], args['stage_repetition']),
                    callback_data=args['id'])
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                # –ü–µ—Ä–µ–¥–∞–µ–º –≤ callback - id –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                markup.add(button)
                self.BOT.send_message(args['chat_id'], self.messageRemind.format(
                    args['id'], args['material'], args['source'],
                    args['stage_repetition']
                ), reply_markup=markup)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            else:
                self.BOT.send_message(args['chat_id'], self.messageLastRemind.format(
                    args['id'], args['material'],
                    args['source']
                ))
        else:
            self.BOT.send_message(args['chat_id'], self.messageRemindError.format(
                args['id'], args['material'],
                args['source'], args['stage_repetition']
            ))

    def insertRemind(self):
        sql = "INSERT INTO reminders (username, material, source, " \
              "chat_id, stage_repetition, created_at, next_repetition_at) VALUES (%s, %s, %s, %s, %s, %s, %s) RETURNING id;"
        data = (self.userData['username'], self.userData['material'], self.userData['source'],
                self.userData['chat_id'], self.userData['stage_repetition'],
                self.userData['created_at'], self.userData['next_repetition_at'])
        return self.DATABASE.insert(sql, data)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    def isWhatCommand(self, message):
        if self.allConnected(message):
            if message.text == self.messageRepetitionInterval:
                self.sendMessageWhatMaterial(message)
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞–∫–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑—É—á–µ–Ω
            else:
                self.BOT.send_message(message.chat.id, self.unknownCommand)
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞

    def isProgramWord(self, message):
        if message.text == self.messageRepetitionInterval:
            self.BOT.send_message(message.chat.id, self.messageProgramWord)
            # –û—à–∏–±–∫–∞ - (–∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–æ–µ —Å–ª–æ–≤–æ)
        else:
            return False
        return True
        # –£–∑–Ω–∞–µ–º, –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–æ, –ª–∏ —Å–ª–æ–≤–æ

    def isCancelWord(self, message):
        if message.text == '/cancel':
            self.BOT.send_message(message.chat.id, self.messageTaskCancel)
        else:
            return False
        return True
        # –£–∑–Ω–∞–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –æ—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏

    def getMinuteStageRepetition(self, stageRepetition):
        return {
            1: 15,
            2: 60,
            3: 180,
            4: 1440,
            5: 2880,
            6: 5760,
            7: 10080,
            8: 20160,
            9: 44640
        }.get(stageRepetition, None)

    def getTimeIntervalStageRepetition(self, stageRepetition):
        return {
            1: '15 –º–∏–Ω—É—Ç',
            2: '1 —á–∞—Å',
            3: '3 —á–∞—Å–∞',
            4: '1 –¥–µ–Ω—å',
            5: '2 –¥–Ω—è',
            6: '4 –¥–Ω—è',
            7: '7 –¥–Ω–µ–π',
            8: '14 –¥–Ω–µ–π',
            9: '1 –º–µ—Å—è—Ü'
        }.get(stageRepetition, None)

    def htmlSpecialChars(self, data):
        if isinstance(data, str):
            return re.sub(r'\s+', ' ',
                          data.replace("&", "&amp;").
                          replace('"', "&quot;").
                          replace("<", "&lt;").
                          replace(">", "&gt;"))

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ

    def isInteger(self, data):
        try:
            int(data)
            return True
        except ValueError:
            return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ

    def setTimezone(self):
        return pytz.timezone(config.TIMEZONE)

    def allConnected(self, message):
        if (self.DATABASE.isConnected()) and self.SCHEDULER.error == 0:
            return True
        self.BOT.send_message(message.chat.id, self.messageProgramIsNotWorking)
        return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–¥–∞–µ–º –æ—à–∏–±–∫—É
